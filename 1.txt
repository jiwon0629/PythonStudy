컴파일러와 인터프리터 비교
컴파일러
작동방식 : 소스코드를 기계어로 먼저 번역하고, 해당 플랫폼에 최적화되어 프로그램을 실행함
장점 : 실행 속도가 빠름
단점 : 한 번에 많은 기억 장소가 필요함
주요 언어 : C, 자바(Java), C++, C#

인터프리터
작동방식 : 별도의 번역 과정 없이 소스코드를 실행 시점에 해석하여 컴퓨터가 처리할 수 있도록 함
장점 : 간단히 작성, 메모리가 적게 필요
단점 : 실행 속도가 느림
주요 언어 : 파이썬, 스칼라

객체지향언어
해당 프로그램이 해결해야 할 문제의 구성요소를 요소별로 정의한 뒤, 각 요소의 기능(method)과 정보(attribute)를 정의하여 요소들을 결합하고, 프로그램을 작성하는 방식

할당(assignment) : 변수에 값을 넣는 과정

메모리 : 변수에 값이 저장되는 공간
변수의 저장 위치를 메모리 주소라고 한다. 

제곱승(**)
ex) 3의 5승 -> 3**5 -> 243

몫(//)
ex) 7 / 2의 몫 -> 7//2 -> 3

자료형 확인하기(type())
ex) a = int(10) type(a) -> <class 'int'>

인덱싱(Indexing) : 리스트에 있는 값에 접근하기 위해, 이 값의 상대적인 주소(offset)를 사용하는 것이다.

슬라이싱(slicing) : 리스트에서 파생된 강력한 기능 중 하나로, 리스트의 인덱스를 사용하여 전체 리스트에서 일부를 잘라내어 반환한다.

in 연산
in 연산은 포함 여부를 확인하는 연산으로, 하나의 값이 해당 리스트에 들어 있는지 확인할 수 있다.
ex) 'blue' in color2 -> False

append() 함수
리스트 맨 끝 인덱스에 새로운 값을 추가할 수 있다.
ex) color = ['red']
color.append(white)
color -> ['red', 'white']

extend() 함수
값을 추가하는 것이 아닌 기존 리스트에 그대로 새로운 리스트를 합치는 기능
ex) color = ['red']
color.extend(['black', 'purple']
color -> ['red', 'black', 'purple']

insert() 함수
append() 함수와 다리 리스트의 특정 위치에 값을 추가하는 기능
ex) color = ['red', 'black', 'purple']
color.insert(0, 'orange')
color -> ['orange', 'red', 'black', 'purple']

remove() 함수
리스트에 있는 특정 값을 지우는 기능
ex) color = ['red', 'black', 'purple']
color.remove('red')
color -> ['black', 'purple']

패킹(packing), 언패킹(unpacking)
ex) t = [1, 2, 3]  #1, 2, 3을 변수 t에 패킹
a,b,c = t
print(t,a,b,c) -> [1,2,3] 1 2 3

패킹(packing)
한 변수에 여러 개의 데이터를 할당하는 것

언패킹(unpacking)
한 변수에 여러 개의 데이터가 들어 있을 때 그것을 각각의 변수로 반환하는 방법

리스트의 메모리 관리 방식
파이썬은 리스트를 저장할 때 값 자체가 아니라, 값이 위치한 메모리 주소를 저장한다.
ex) a = 300
b = 300
a is b -> false  #같은 메모리주소를 가지고 있는지
a==b -> true   #내용이 같은지(값)

파이썬의 정수형 저장방식의 특성
-5 ~ 256 까지의 정수값을 특정 메모리 주소에 저장한다.
해당 숫자를 할당하려고 하면 해당 변수는 그 숫자가 가진 메모리 주소로 연결한다.
ex) a = 1
b = 1
a is b -> true
a==b -> true

함수(fucntion)
어떤 일을 수행하는 코드의 덩어리, 또는 코드의 묶음
1. 필요할 때마다 수행 가능
2. 논리적인 단위로 분할 가능
3. 코드의 캡슐화

매개변수(parameter)
함수에서 입력값으로 사용하는 변수를 의미하며, 1개 이상의 값을 적을 수 있다.

함수의 형태
반환값 X, 매개변수 X - 함수 안 수행문만 수행
반환값 X, 매개변수 O - 매개변수를 사용하여 수행문만 수행
반환값 O, 매개변수 X - 매개변수 없이 수행문을 수행한 후, 결과값 반환
반환값 O, 매개변수 O - 매개변수를 사용하여 수행문을 수행한 후, 결과값 반환

함수가 변수를 호출하는 방식
값에 의한 호출
- 함수에 인수를 넘길 때 값만 넘김
- 함수 안의 인수값 변경 시, 호출된 변수에 영향을 주지 않음
참조 호출
- 함수에 인수를 넘길 때 메모리 주소를 넘김
- 함수 안의 인수값 변경 시, 호출된 변수값도 변경됨

변수의 사용 범위
지역 변수(local variable) : 함수 안에서만 사용
전역 변수(global variable) : 프로그램 전체에서 사용
전역 변수를 함수 내에서 사용하고 싶을 때에는 global 변수명 을 사용한다.

재귀함수(recursive function)
함수가 자기 자신을 다시 부르는 함수이다.
ex) factorial

def print_something(my_name, your_name):
    print("Hello{0}, My name is {1}".format(your_name, my_name))
print_something("Sungchul", "TEAMLAB")
print_something(your_name = "TEAMLAB", my_name = "Sungchul")

format() 함수
{}안에 내용을 대입하는 것

가변인수(variable-length arguments)
인자를 정하지않고 변수를 묶어준다.
매개변수 개수가 정해지지 않고 변수를 묶어 주는 역할
ex) def test(a, b, *args):
        return a + b + sum(args)
print(test(1,2,3,4,5)
출력 : 15
























