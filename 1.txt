컴파일러와 인터프리터 비교
컴파일러
작동방식 : 소스코드를 기계어로 먼저 번역하고, 해당 플랫폼에 최적화되어 프로그램을 실행함
장점 : 실행 속도가 빠름
단점 : 한 번에 많은 기억 장소가 필요함
주요 언어 : C, 자바(Java), C++, C#

인터프리터
작동방식 : 별도의 번역 과정 없이 소스코드를 실행 시점에 해석하여 컴퓨터가 처리할 수 있도록 함
장점 : 간단히 작성, 메모리가 적게 필요
단점 : 실행 속도가 느림
주요 언어 : 파이썬, 스칼라

객체지향언어
해당 프로그램이 해결해야 할 문제의 구성요소를 요소별로 정의한 뒤, 각 요소의 기능(method)과 정보(attribute)를 정의하여 요소들을 결합하고, 프로그램을 작성하는 방식

할당(assignment) : 변수에 값을 넣는 과정

메모리 : 변수에 값이 저장되는 공간
변수의 저장 위치를 메모리 주소라고 한다. 

제곱승(**)
ex) 3의 5승 -> 3**5 -> 243

몫(//)
ex) 7 / 2의 몫 -> 7//2 -> 3

자료형 확인하기(type())
ex) a = int(10) type(a) -> <class 'int'>

인덱싱(Indexing) : 리스트에 있는 값에 접근하기 위해, 이 값의 상대적인 주소(offset)를 사용하는 것이다.

슬라이싱(slicing) : 리스트에서 파생된 강력한 기능 중 하나로, 리스트의 인덱스를 사용하여 전체 리스트에서 일부를 잘라내어 반환한다.

in 연산
in 연산은 포함 여부를 확인하는 연산으로, 하나의 값이 해당 리스트에 들어 있는지 확인할 수 있다.
ex) 'blue' in color2 -> False

append() 함수
리스트 맨 끝 인덱스에 새로운 값을 추가할 수 있다.
ex) color = ['red']
color.append(white)
color -> ['red', 'white']

extend() 함수
값을 추가하는 것이 아닌 기존 리스트에 그대로 새로운 리스트를 합치는 기능
ex) color = ['red']
color.extend(['black', 'purple']
color -> ['red', 'black', 'purple']

insert() 함수
append() 함수와 다리 리스트의 특정 위치에 값을 추가하는 기능
ex) color = ['red', 'black', 'purple']
color.insert(0, 'orange')
color -> ['orange', 'red', 'black', 'purple']

remove() 함수
리스트에 있는 특정 값을 지우는 기능
ex) color = ['red', 'black', 'purple']
color.remove('red')
color -> ['black', 'purple']




























